import { FarmCard } from "./FarmCard";
import { FarmButton } from "./FarmButton";
import { AnimatedIcon } from "./AnimatedIcon";
import { WeatherPanel } from "./WeatherPanel";
import { ActionPopup } from "./ActionPopup";
import { FarmHealthStats } from "./FarmHealthStats";
import { InteractiveFarmMap } from "./InteractiveFarmMap";
import { useState, useEffect } from "react";
import { 
  Gamepad2, 
  BarChart3, 
  Trophy, 
  Settings,
  Cloud,
  Droplets,
  Sprout,
  Heart,
  Sun,
  Star
} from "lucide-react";

interface GameState {
  cropHealth: number;
  waterLevel: number;
  animalHealth: number;
  temperature: number;
  humidity: number;
  rainfall: number;
  points: number;
  selectedAction: string | null;
  showTutorial: boolean;
  currentStep: number;
}

interface TutorialStep {
  title: string;
  description: string;
  animation: string;
  youtubeId?: string;
  tips: string[];
  isYoutubeVideo?: boolean;
  referrerPolicy?: 'strict-origin-when-cross-origin' | 'origin' | 'no-referrer';
}

interface CropAction {
  id: string;
  emoji: string;
  title: string;
  description: string;
  tutorial: TutorialStep[];
}

interface HotspotInfo {
  id: string;
  title: string;
  description: string;
  type: 'crop' | 'animal' | 'water' | 'fertilizer';
  position: { x: number; y: number };
}

const ANIMAL_ACTIONS: CropAction[] = [
  {
    id: 'feed',
    emoji: '🐄',
    title: 'Feed Animals',
    description: 'Feed and care for your farm animals',
    tutorial: [
      {
        title: 'Let\'s Learn About Animal Care!',
        description: 'Watch this video to learn how to properly care for farm animals!',
        animation: '/animations/feed-animals.gif',
        youtubeId: 'EQQ3nGlwXpI',
        isYoutubeVideo: true,
        referrerPolicy: 'strict-origin-when-cross-origin',
        tips: [
          'Provide fresh water daily',
          'Give appropriate food portions',
          'Keep feeding areas clean',
          'Monitor animal health',
          'Follow feeding schedules'
        ]
      },
      {
        title: 'Animal Health Check',
        description: 'Learn to monitor animal health',
        animation: '/animations/check-animals.gif',
        youtubeId: 'zWHmGRRRpFw',
        isYoutubeVideo: true,
        tips: [
          'Check for normal behavior',
          'Monitor eating habits',
          'Look for signs of illness',
          'Keep living areas clean'
        ]
      }
    ]
  }
];

const CROP_ACTIONS: CropAction[] = [
  {
    id: 'plant',
    emoji: '🌰',
    title: 'Plant Seeds',
    description: 'Plant new crops in empty plots',
    tutorial: [
      {
        title: 'Let\'s Learn About Planting!',
        description: 'Watch this video to learn how to plant seeds properly!',
        animation: '/animations/prepare-soil.gif',
        youtubeId: 'COZkBrGu2tY',
        isYoutubeVideo: true,
        referrerPolicy: 'strict-origin-when-cross-origin',
        tips: [
          'Pay attention to the planting depth',
          'Water your seeds regularly',
          'Give plants enough sunlight',
          'Keep the soil healthy',
          'Follow the video instructions carefully'
        ]
      },
      {
        title: 'Practice Time!',
        description: 'Now it\'s your turn to try planting!',
        animation: '/animations/plant-seeds.gif',
        tips: [
          'Make small holes in the soil',
          'Place seeds carefully in each hole',
          'Cover gently with soil',
          'Water after planting'
        ]
      },
      {
        title: 'Care for Your Plants',
        description: 'Keep your plants happy and healthy!',
        animation: '/animations/water-seeds.gif',
        tips: [
          'Water regularly but don\'t overwater',
          'Watch for new growth',
          'Remove any weeds',
          'Be patient - plants take time to grow!'
        ]
      }
    ]
  },
  {
    id: 'water',
    emoji: '💧',
    title: 'Water Crops',
    description: 'Give your plants fresh water',
    tutorial: [
      {
        title: 'Let\'s Learn About Watering!',
        description: 'Watch this fun video to learn the best watering techniques!',
        animation: '/animations/water-plants.gif',
        youtubeId: 'u44B7y4VE3U',
        isYoutubeVideo: true,
        tips: [
          'Touch the soil to check moisture',
          'Look for dry surface signs',
          'Check weather forecast',
          'Water early morning or evening'
        ]
      },
      {
        title: 'Water the Plants',
        description: 'Time to give our plants a drink!',
        animation: '/animations/water-plants.gif',
        tips: [
          'Water at the base of plants',
          'Use right amount of water',
          'Water in early morning or evening',
          'Avoid overwatering'
        ]
      }
    ]
  },
  {
    id: 'harvest',
    emoji: '🌾',
    title: 'Harvest',
    description: 'Collect your fully grown crops',
    tutorial: [
      {
        title: 'Check if Ready',
        description: 'Let\'s see if our crops are ready to harvest!',
        animation: '/animations/check-crops.gif',
        tips: [
          'Look for ripe colors',
          'Check size of vegetables',
          'Feel firmness of fruits'
        ]
      },
      {
        title: 'Harvest Time',
        description: 'Time to collect our fresh crops!',
        animation: '/animations/harvest-crops.gif',
        tips: [
          'Use clean tools',
          'Cut carefully at the right spot',
          'Handle produce gently'
        ]
      }
    ]
  }
];

interface FarmDashboardProps {
  onNavigate: (page: string) => void;
}

export const FarmDashboard = ({ onNavigate }: FarmDashboardProps) => {
  const [gameState, setGameState] = useState<GameState>({
    cropHealth: 85,
    waterLevel: 72,
    animalHealth: 92,
    temperature: 75,
    humidity: 68,
    rainfall: 0.2,
    points: 150,
    selectedAction: null,
    showTutorial: true,
    currentStep: 0
  });

  const [selectedHotspot, setSelectedHotspot] = useState<HotspotInfo | null>(null);
  const [showActionPopup, setShowActionPopup] = useState(false);
  const [selectedActionType, setSelectedActionType] = useState<"crops" | "animals" | "water" | "fertilizer">("crops");

  const handleActionSelect = (actionId: string) => {
    const action = CROP_ACTIONS.find(a => a.id === actionId) || ANIMAL_ACTIONS.find(a => a.id === actionId);
    if (action) {
      // Update state in one go to prevent race conditions
      setGameState(prev => ({
        ...prev,
        selectedAction: actionId,
        showTutorial: true,
        currentStep: 0
      }));
    }
  };

  const handleNextStep = () => {
    const action = CROP_ACTIONS.find(a => a.id === gameState.selectedAction) || 
                   ANIMAL_ACTIONS.find(a => a.id === gameState.selectedAction);
    
    if (action && gameState.currentStep < action.tutorial.length - 1) {
      setGameState(prev => ({
        ...prev,
        currentStep: prev.currentStep + 1
      }));
    } else {
      // Show action popup instead of closing immediately
      setGameState(prev => ({
        ...prev,
        showTutorial: false,
        currentStep: 0
      }));
      
      // Set the appropriate action type based on the selected action
      if (action) {
        switch (action.id) {
          case 'plant':
          case 'water':
          case 'harvest':
            setSelectedActionType("crops");
            break;
          case 'feed':
            setSelectedActionType("animals");
            break;
          default:
            setSelectedActionType("crops");
        }
      }
      setShowActionPopup(true);
    }
  };

  // Handle initial tutorial and game updates
  useEffect(() => {
    // Initialize tutorial state from localStorage or show by default
    const hasSeenTutorial = localStorage.getItem('hasSeenTutorial') === 'true';
    if (!hasSeenTutorial) {
      setGameState(prev => ({ ...prev, showTutorial: true }));
    }

    // Simulate real-time updates for game stats
    const timer = setInterval(() => {
      setGameState(prev => ({
        ...prev,
        cropHealth: Math.min(100, prev.cropHealth + Math.random() * 2 - 0.5),
        waterLevel: Math.min(100, prev.waterLevel + Math.random() * 2 - 1),
        animalHealth: Math.min(100, prev.animalHealth + Math.random() * 2 - 0.5)
      }));
    }, 5000);

    return () => clearInterval(timer);
  }, []);

  // Save tutorial state when completed
  useEffect(() => {
    if (!gameState.showTutorial) {
      localStorage.setItem('hasSeenTutorial', 'true');
    }
  }, [gameState.showTutorial]);

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 via-green-50 to-yellow-50">
      {/* Animated Header */}
      <div className="relative bg-gradient-to-r from-primary/90 to-primary overflow-hidden">
        <div className="absolute inset-0">
          <div className="animate-float absolute right-10 top-5">
            <Cloud className="text-white/20 w-16 h-16" />
          </div>
          <div className="animate-float-slow absolute left-20 top-8">
            <Cloud className="text-white/30 w-12 h-12" />
          </div>
        </div>
        <nav className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 h-20 flex items-center justify-between">
          <div className="flex items-center gap-4">
            <div className="relative">
              <img src="/assets/nasa-farm-logo.png" alt="NASA Farm Logo" 
                   className="h-12 w-auto animate-spin-slow" />
              <div className="absolute -top-1 -right-1 bg-yellow-400 rounded-full p-1 
                            shadow-lg animate-bounce-slow">
                <Star className="w-4 h-4 text-white" />
              </div>
            </div>
            <div>
              <h1 className="text-2xl font-bold font-kids text-white">Space Farm</h1>
              <p className="text-sm text-white/80">Level 1: Crop Explorer</p>
            </div>
          </div>
          <div className="flex items-center gap-6">
            <div className="flex items-center gap-2 bg-white/10 rounded-full px-4 py-2">
              <Star className="w-5 h-5 text-yellow-400" />
              <span className="text-white font-bold">{gameState.points}</span>
            </div>
            <button onClick={() => onNavigate('settings')} 
                    className="p-2 rounded-full bg-white/10 hover:bg-white/20 transition-colors">
              <Settings className="w-6 h-6 text-white" />
            </button>
          </div>
        </nav>
      </div>

      {/* Main Game Area */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        {/* Farm Stats */}
        <div className="grid grid-cols-2 sm:grid-cols-4 gap-4 mb-6">
          <div className="bg-white/80 backdrop-blur rounded-2xl shadow-lg p-4 border-2 border-green-100 
                         hover:scale-105 transition-transform cursor-pointer group">
            <div className="flex items-center gap-3">
              <div className="p-2 rounded-xl bg-green-100 group-hover:bg-green-200 transition-colors">
                <Sprout className="w-6 h-6 text-green-600" />
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-600">Crop Health</h3>
                <div className="flex items-center gap-2">
                  <div className="w-24 h-2 bg-gray-100 rounded-full overflow-hidden">
                    <div className="h-full bg-green-500 transition-all duration-500"
                         style={{ width: `${gameState.cropHealth}%` }}></div>
                  </div>
                  <span className="text-sm font-bold text-green-600">{Math.round(gameState.cropHealth)}%</span>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white/80 backdrop-blur rounded-2xl shadow-lg p-4 border-2 border-blue-100
                         hover:scale-105 transition-transform cursor-pointer group">
            <div className="flex items-center gap-3">
              <div className="p-2 rounded-xl bg-blue-100 group-hover:bg-blue-200 transition-colors">
                <Droplets className="w-6 h-6 text-blue-600" />
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-600">Water Level</h3>
                <div className="flex items-center gap-2">
                  <div className="w-24 h-2 bg-gray-100 rounded-full overflow-hidden">
                    <div className="h-full bg-blue-500 transition-all duration-500"
                         style={{ width: `${gameState.waterLevel}%` }}></div>
                  </div>
                  <span className="text-sm font-bold text-blue-600">{Math.round(gameState.waterLevel)}%</span>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white/80 backdrop-blur rounded-2xl shadow-lg p-4 border-2 border-red-100
                         hover:scale-105 transition-transform cursor-pointer group">
            <div className="flex items-center gap-3">
              <div className="p-2 rounded-xl bg-red-100 group-hover:bg-red-200 transition-colors">
                <Heart className="w-6 h-6 text-red-600" />
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-600">Animal Health</h3>
                <div className="flex items-center gap-2">
                  <div className="w-24 h-2 bg-gray-100 rounded-full overflow-hidden">
                    <div className="h-full bg-red-500 transition-all duration-500"
                         style={{ width: `${gameState.animalHealth}%` }}></div>
                  </div>
                  <span className="text-sm font-bold text-red-600">{Math.round(gameState.animalHealth)}%</span>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white/80 backdrop-blur rounded-2xl shadow-lg p-4 border-2 border-orange-100
                         hover:scale-105 transition-transform cursor-pointer group">
            <div className="flex items-center gap-3">
              <div className="p-2 rounded-xl bg-orange-100 group-hover:bg-orange-200 transition-colors">
                <Sun className="w-6 h-6 text-orange-600" />
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-600">Weather</h3>
                <div className="text-sm font-bold text-orange-600">
                  {gameState.temperature}°F
                  <span className="text-xs font-normal text-gray-500 ml-1">
                    ({gameState.humidity}% humid)
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Interactive Farm Area */}
        <div className="grid lg:grid-cols-3 gap-6">
          {/* Main Farm View */}
          <div className="lg:col-span-2 relative">
            <div className="bg-white/80 backdrop-blur rounded-2xl shadow-lg border-2 border-green-100 
                           overflow-hidden group">
              <div className="p-4 border-b-2 border-green-100 flex justify-between items-center">
                <h2 className="text-xl font-bold font-kids text-primary flex items-center gap-2">
                  <Sprout className="w-6 h-6" />
                  Your Space Farm
                </h2>
                <div className="flex gap-2">
                  <button className="p-2 rounded-xl bg-green-100 hover:bg-green-200 transition-colors">
                    <Droplets className="w-5 h-5 text-green-600" />
                  </button>
                  <button className="p-2 rounded-xl bg-green-100 hover:bg-green-200 transition-colors">
                    <Star className="w-5 h-5 text-green-600" />
                  </button>
                </div>
              </div>
              
              <div className="relative h-[500px] overflow-hidden">
                {/* Interactive Farm Map with animation wrapper */}
                <div className="absolute inset-0 transition-transform duration-500 
                               hover:scale-105 group-hover:brightness-105">
                  <InteractiveFarmMap onNavigate={onNavigate} />
                </div>
                
                {/* Interactive Hotspots */}
                {selectedHotspot && (
                  <div className="absolute inset-0 bg-black/50 flex items-center justify-center p-6">
                    <div className="bg-white rounded-2xl p-6 max-w-md animate-fade-in">
                      <h3 className="text-xl font-bold mb-2">{selectedHotspot.title}</h3>
                      <p className="text-gray-600 mb-4">{selectedHotspot.description}</p>
                      <button 
                        onClick={() => setSelectedHotspot(null)}
                        className="bg-primary text-white px-4 py-2 rounded-lg hover:bg-primary-dark transition-colors"
                      >
                        Close
                      </button>
                    </div>
                  </div>
                )}

                {/* Tutorial Overlay */}
                {gameState.showTutorial && !gameState.selectedAction && (
                  <div className="absolute inset-0 bg-black/50 flex items-center justify-center p-6">
                    <div className="bg-white rounded-2xl p-6 max-w-md animate-bounce-in text-center">
                      <h3 className="text-xl font-bold mb-2">Welcome to Your Space Farm! 🚀</h3>
                      <p className="text-gray-600 mb-4">
                        Click on different areas of your farm to learn about crops, 
                        animals, and NASA's farming technology!
                      </p>
                      <button 
                        onClick={() => setGameState(prev => ({ ...prev, showTutorial: false }))}
                        className="bg-primary text-white px-6 py-3 rounded-xl text-lg font-bold
                                 hover:bg-primary-dark transition-colors"
                      >
                        Start Exploring! 🌾
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Game Controls & Info Panel */}
          <div className="space-y-4">
            {/* Quick Actions */}
            <div className="flex gap-3">
              <FarmButton 
                variant="green" 
                size="lg" 
                onClick={() => onNavigate('games')}
                className="flex-1 flex items-center justify-center gap-2 px-4 py-3 bg-gray-800 
                         text-white rounded-xl hover:bg-gray-700 transition-all hover:scale-105 
                         shadow-lg"
              >
                <Gamepad2 size={20} className="animate-bounce" />
                <span className="font-bold">Play Games</span>
              </FarmButton>
              <FarmButton 
                variant="purple" 
                size="lg" 
                onClick={() => onNavigate('knowledge')}
                className="flex-1 flex items-center justify-center gap-2 px-4 py-3 bg-gray-800 
                         text-white rounded-xl hover:bg-gray-700 transition-all hover:scale-105 
                         shadow-lg"
              >
                <BarChart3 size={20} className="animate-pulse" />
                <span className="font-bold">NASA Data</span>
              </FarmButton>
            </div>

            {/* Daily Challenge */}
            <div className="bg-white rounded-2xl shadow-lg p-5 relative overflow-hidden border-2 border-yellow-200">
              <div className="absolute top-0 right-0 transform translate-x-1/3 -translate-y-1/3">
                <Star className="w-32 h-32 text-yellow-100 animate-spin-slow" />
              </div>
              <div className="relative">
                <div className="flex items-center gap-3 mb-4">
                  <Trophy className="w-6 h-6 text-yellow-500 animate-bounce" />
                  <h3 className="text-lg font-bold text-gray-800">Daily Mission</h3>
                </div>
                <div className="bg-yellow-50 rounded-xl p-4">
                  <p className="text-gray-700 text-sm mb-3">
                    Complete these tasks to earn rewards:
                  </p>
                  <ul className="space-y-2 mb-4">
                    <li className="flex items-center gap-2 text-sm text-gray-600">
                      <div className="w-5 h-5 rounded-full bg-green-100 flex items-center justify-center">
                        <span className="text-green-600">✓</span>
                      </div>
                      Water all crops
                    </li>
                    <li className="flex items-center gap-2 text-sm text-gray-600">
                      <div className="w-5 h-5 rounded-full bg-yellow-100 flex items-center justify-center">
                        <span className="text-yellow-600">⋯</span>
                      </div>
                      Feed the animals
                    </li>
                    <li className="flex items-center gap-2 text-sm text-gray-600">
                      <div className="w-5 h-5 rounded-full bg-red-100 flex items-center justify-center">
                        <span className="text-red-600">!</span>
                      </div>
                      Apply fertilizer
                    </li>
                  </ul>
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm text-gray-700">
                      <span>Mission Progress</span>
                      <span className="font-bold">2/3 Tasks</span>
                    </div>
                    <div className="w-full h-2 bg-gray-100 rounded-full overflow-hidden">
                      <div className="w-2/3 h-full bg-yellow-400 animate-pulse"></div>
                    </div>
                    <p className="text-xs text-gray-500 text-center mt-2">
                      Reward: <span className="font-bold text-yellow-600">50 Space Points</span>
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {/* Weather & Health Monitor */}
            <div className="bg-white/80 backdrop-blur rounded-2xl shadow-lg border-2 border-blue-100 p-5">
              <h2 className="text-xl font-bold font-kids text-primary mb-4 flex items-center gap-2">
                <Cloud className="w-6 h-6" />
                Farm Monitor
              </h2>
              <div className="grid grid-cols-1 gap-4">
                <div className="bg-blue-50/50 rounded-xl p-3">
                  <WeatherPanel />
                </div>
                <div className="bg-green-50/50 rounded-xl p-3">
                  <FarmHealthStats />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Tutorial Video Modal */}
      {gameState.selectedAction && gameState.showTutorial && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl max-w-2xl w-full p-6 relative transform transition-all duration-300 ease-in-out translate-y-0 opacity-100">
            {(() => {
              const action = CROP_ACTIONS.find(a => a.id === gameState.selectedAction) ||
                           ANIMAL_ACTIONS.find(a => a.id === gameState.selectedAction);
              const step = action?.tutorial[gameState.currentStep];
              
              if (!action || !step) return null;

              return (
                <>
                  <div className="text-center mb-6">
                    <h2 className="text-2xl font-bold text-gray-800 mb-2">
                      {action.emoji} {step.title}
                    </h2>
                    <p className="text-gray-600">{step.description}</p>
                  </div>

                  <div className="aspect-video rounded-xl overflow-hidden mb-6 bg-gray-100 relative">
                    {step.isYoutubeVideo ? (
                      <div className="relative w-full h-0 pb-[56.25%] bg-black">
                        <iframe
                          key={`${step.youtubeId}-${gameState.currentStep}`}
                          className="absolute top-0 left-0 w-full h-full rounded-xl"
                          src={`https://www.youtube.com/embed/${step.youtubeId}?enablejsapi=1&rel=0&modestbranding=1&controls=1&showinfo=0&autoplay=0&mute=0`}
                          title={step.title}
                          frameBorder="0"
                          loading="lazy"
                          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                          referrerPolicy="strict-origin-when-cross-origin"
                          allowFullScreen
                        />
                        {/* Loading indicator */}
                        <div className="absolute inset-0 flex items-center justify-center bg-black/50 pointer-events-none opacity-0 transition-opacity duration-300 group-hover:opacity-100">
                          <div className="flex flex-col items-center gap-2">
                            <div className="animate-spin rounded-full h-12 w-12 border-4 border-white border-t-transparent"></div>
                            <p className="text-white text-sm">Loading video...</p>
                          </div>
                        </div>
                      </div>
                    ) : (
                      <img 
                        src={step.animation} 
                        alt={step.title}
                        className="w-full h-full object-cover"
                      />
                    )}

                    {/* Video Info Overlay */}
                    {step.isYoutubeVideo && (
                      <div className="absolute top-4 left-4 right-4">
                        <div className="bg-white/90 backdrop-blur-sm rounded-lg p-3 shadow-lg 
                                      text-sm text-gray-700 border border-gray-200">
                          <p className="flex items-center gap-2">
                            <span className="text-red-500">▶</span>
                            {`Watch this educational video about ${action.title.toLowerCase()}!`}
                          </p>
                        </div>
                      </div>
                    )}
                  </div>
                  
                  {/* Interactive Elements */}
                  <div className="grid grid-cols-2 gap-4 mb-6">
                    <div className="bg-green-50 rounded-xl p-4">
                      <h4 className="font-bold text-green-800 mb-3 flex items-center gap-2">
                        <span className="text-xl">📝</span>
                        Learning Goals
                      </h4>
                      <ul className="space-y-2">
                        <li className="text-green-700 text-sm flex items-center gap-2">
                          <span className="text-green-500">✓</span>
                          Understanding basics
                        </li>
                        <li className="text-green-700 text-sm flex items-center gap-2">
                          <span className="text-green-500">✓</span>
                          Learning proper techniques
                        </li>
                      </ul>
                    </div>
                    
                    <div className="bg-blue-50 rounded-xl p-4">
                      <h4 className="font-bold text-blue-800 mb-3 flex items-center gap-2">
                        <span className="text-xl">💡</span>
                        Fun Facts
                      </h4>
                      <p className="text-blue-700 text-sm">
                        Did you know? Proper techniques help plants grow much faster!
                      </p>
                    </div>
                  </div>

                  <div className="bg-green-50 rounded-xl p-4 mb-6">
                    <h4 className="font-bold text-green-800 mb-2">Tips:</h4>
                    <ul className="space-y-2">
                      {step.tips.map((tip, index) => (
                        <li key={index} className="flex items-center gap-2 text-green-700">
                          <span className="text-green-500">✓</span>
                          {tip}
                        </li>
                      ))}
                    </ul>
                  </div>

                  <div className="flex justify-between">
                    <button
                      onClick={() => setGameState(prev => ({ 
                        ...prev, 
                        selectedAction: null,
                        showTutorial: false 
                      }))}
                      className="px-6 py-2 border-2 border-gray-200 rounded-xl text-gray-600 
                               hover:bg-gray-50 transition-colors"
                    >
                      Skip Tutorial
                    </button>
                    <button
                      onClick={handleNextStep}
                      className="px-6 py-2 bg-green-500 text-white rounded-xl 
                               hover:bg-green-600 transition-colors"
                    >
                      {gameState.currentStep < action.tutorial.length - 1 ? 'Next Step' : 'Start Farming!'}
                    </button>
                  </div>
                </>
              );
            })()}
          </div>
        </div>
      )}

      {/* Quick Access Toolbar */}
      <div className="fixed bottom-6 left-1/2 transform -translate-x-1/2">
        <div className="bg-white/90 backdrop-blur-lg rounded-full shadow-lg border-2 border-primary/20 
                       p-2 flex items-center gap-2">
          <button 
            onClick={() => onNavigate('games')}
            className="p-3 rounded-full hover:bg-green-100 transition-colors group"
          >
            <Gamepad2 className="w-6 h-6 text-green-600 group-hover:scale-110 transition-transform" />
          </button>
          <button 
            onClick={() => onNavigate('knowledge')}
            className="p-3 rounded-full hover:bg-purple-100 transition-colors group"
          >
            <BarChart3 className="w-6 h-6 text-purple-600 group-hover:scale-110 transition-transform" />
          </button>
          <button 
            onClick={() => onNavigate('rewards')}
            className="p-3 rounded-full hover:bg-yellow-100 transition-colors group"
          >
            <Trophy className="w-6 h-6 text-yellow-600 group-hover:scale-110 transition-transform" />
          </button>
          <button 
            onClick={() => onNavigate('settings')}
            className="p-3 rounded-full hover:bg-gray-100 transition-colors group"
          >
            <Settings className="w-6 h-6 text-gray-600 group-hover:scale-110 transition-transform" />
          </button>
        </div>
      </div>

      {/* Footer */}
      <footer className="mt-8 py-4 text-center text-sm text-gray-500">
        <p>© 2025 NASA Farm Explorers • Made with 🚀 for young space farmers</p>
      </footer>

      {/* Action Popup */}
      <ActionPopup
        type={selectedActionType}
        isOpen={showActionPopup}
        onClose={() => {
          setShowActionPopup(false);
          setGameState(prev => ({
            ...prev,
            selectedAction: null
          }));
        }}
      />
    </div>
  );
};
